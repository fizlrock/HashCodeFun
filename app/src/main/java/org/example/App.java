/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.util.Stack;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Hex;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class App {

  private static int port = 1213;

  public static void main(String[] args) throws NoSuchAlgorithmException, IOException {

    Security.addProvider(new BouncyCastleProvider());
    log.info("Криптопровайдер загружен");

    try (ServerSocket ss = new ServerSocket(port)) {
      log.info("Сервер запущен");
      log.info("Ожидание клиента");

      var client = ss.accept();
      log.info("Клиент подключился");
      var input = client.getInputStream();

      var passwords = getPasswords("123 123123 ");

      while (true) {
        byte[] recieved_password = new byte[16];
        int readed = input.read(recieved_password, 0, 16);
        if(readed < 16)
          return;
        byte[] expected_password = passwords.pop();

        log.info("Ожидается пароль: {}", Hex.toHexString(expected_password));
        log.info("Получен пароль: {}", Hex.toHexString(recieved_password));

        boolean equals = Hex.toHexString(expected_password).equals(Hex.toHexString(recieved_password));
        if (equals)
          log.info("Пароль подтвержден");
        else
          log.error("Пароль не совпал");
      }
    } catch (Exception e) {

      log.info("Клиент запущен");

      Socket server = new Socket("localhost", port);
      var out = server.getOutputStream();
      log.info("Соединение с сервером установлено");

      var passwords = getPasswords("123 123123 ");

      var lastpass = passwords.pop();
      log.info("Отправка одноразового пароля: {}", Hex.toHexString(lastpass));
      out.write(lastpass);
      log.info("Одноразовых паролей осталось: {}", passwords.size());

      server.close();

    }

    log.info("Успешно прочитано!");

  }

  static Stack<byte[]> getPasswords(String mainPassword) throws NoSuchAlgorithmException {

    MessageDigest crypt = MessageDigest.getInstance("MD2");
    Stack<byte[]> passwords = new Stack<>();
    log.info("Создание 10 одноразовых паролей");

    passwords.push(crypt.digest(mainPassword.getBytes()));

    for (int i = 1; i < 10; i++) {
      passwords.push(crypt.digest(passwords.peek()));
      log.debug("Одноразовый пароль {} = {}", i, Hex.toHexString(passwords.peek()));
    }

    return passwords;
  }

}
